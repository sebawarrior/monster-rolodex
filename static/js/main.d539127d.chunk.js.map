{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["CardMediaNew","props","state","monster","Card","id","CardActionArea","CardMedia","component","alt","height","src","this","title","CardContent","Typography","gutterBottom","variant","name","color","company","catchPhrase","CardActions","Button","size","React","Component","CardList","className","monsters","map","mon","key","SearchBox","placeholder","handleChange","console","log","noValidate","autoComplete","StylesProvider","inyectFirst","TextField","onChange","label","type","App","e","setState","searchField","target","value","fetch","then","response","json","users","filteredMonsters","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qaAwDeA,G,wDA5Cb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACTC,QAASF,EAAME,SAHH,E,qDAShB,OACM,kBAACC,EAAA,EAAD,CAAMC,GAAK,QACX,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACAC,UAAU,MACVC,IAAI,wBACJC,OAAO,MACPC,IAAK,yBAA2BC,KAAKV,MAAMC,QAAQE,GAAK,yBACxDQ,MAAM,0BAEN,kBAACC,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKT,UAAU,MAC3CI,KAAKV,MAAMC,QAAQe,MAExB,kBAACH,EAAA,EAAD,CAAYE,QAAQ,QAAQE,MAAM,gBAAgBX,UAAU,KACvDI,KAAKV,MAAMC,QAAQiB,QAAQC,cAG9B,kBAACC,EAAA,EAAD,CAAajB,GAAG,cAAcY,QAAQ,aAElC,kBAACM,EAAA,EAAD,CAAQlB,GAAG,cAAcmB,KAAK,QAAQL,MAAM,UAAUF,QAAQ,aAA9D,SAKA,kBAACM,EAAA,EAAD,CAAQlB,GAAG,cAAcY,QAAQ,YAAYO,KAAK,QAAQL,MAAM,WAAhE,qB,GAnCSM,IAAMC,YCPpBC,EAAW,SAAC1B,GAErB,OACI,yBAAK2B,UAAU,uBACX,yBAAKA,UAAU,aACV3B,EAAM4B,SAASC,KAAI,SAAAC,GAAG,OAAK,kBAAC,EAAD,CAAcH,UAAU,OAAOzB,QAAS4B,EAAKC,IAAKD,EAAI1B,IAAI,uBAAG2B,IAAKD,EAAI1B,IAAZ,IAAkB0B,EAAIb,KAAtB,Y,0BCHzFe,EAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aAEpC,OADAC,QAAQC,IAAI,eAEV,0BAAMC,YAAU,EAACC,aAAa,OAC5B,6BACI,kBAACC,EAAA,EAAD,CAAgBC,aAAW,GAC7B,kBAACC,EAAA,EAAD,CAAWR,YAAaA,EAAaS,SAAUR,EAAchB,MAAM,UAAUd,GAAG,kBAAkBuC,MAAM,eAAeC,KAAK,SAAS5B,QAAQ,eC4CxI6B,E,kDAhDb,aAAc,IAAD,8BACX,gBAcFX,aAAe,SAACY,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAdrC,EAAKjD,MAAQ,CACX+C,YAAa,GACbpB,SAAU,IAJD,E,gEASO,IAAD,OACjBuB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAACnB,SAAS2B,S,+BAsBhC,IAAD,SAC0B5C,KAAKV,MAC/BuD,GAFA,EACCR,YADD,EACcpB,SACc6B,QAAO,SAAA3B,GAAG,OAAIA,EAAIb,KAAKyC,cAAcC,SAAS,EAAK1D,MAAM+C,YAAYU,mBAEvG,OACE,yBAAK/B,UAAU,OACf,wBAAIA,UAAU,iBAAd,qBACA,kBAAC,EAAD,CAAWM,YAAY,kBAAkBC,aAAc,SAACY,GAAD,OAAO,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,WACnG,kBAAC,EAAD,CAAUtB,SAAY4B,S,GA7CV/B,aCOEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.d539127d.chunk.js","sourcesContent":["import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport './card.styles.css'\n\n\nclass CardMediaNew extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n        monster: props.monster\n    }\n  }\n\n  render(){\n    //Si usara un setState dentro de render se generaría un loop infinito\n    return (\n          <Card id = \"card\">\n          <CardActionArea>\n            <CardMedia\n            component=\"img\"\n            alt=\"Contemplative Reptile\"\n            height=\"140\"\n            src={'https://robohash.org/$' + this.state.monster.id + '?set=set2&size=300x300'} // Con esta manera podemos ingresar números en textos\n            title=\"Contemplative Reptile\"\n            />\n            <CardContent>\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                {this.state.monster.name}\n            </Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                {this.state.monster.company.catchPhrase}\n            </Typography>\n            </CardContent>\n              <CardActions id=\"buttonplace\" variant=\"contained\">\n\n                  <Button id=\"cardbutton1\" size=\"small\" color=\"primary\" variant=\"contained\">\n                    Share\n                  </Button>\n\n                \n                  <Button id=\"cardbutton2\" variant=\"contained\" size=\"small\" color=\"primary\">\n                    Learn More\n                  </Button>\n              </CardActions>\n          </CardActionArea>\n          </Card>\n    );\n    }\n}\n\nexport default CardMediaNew;","import React from 'react'\nimport './card-list.component.css'\nimport CardMediaNew from '../card/card.component'\n\nexport const CardList = (props) => { //Este es un function component\n    //Antes del return puedo escribir código javascript\n    return(\n        <div className=\"card-list-container\">\n            <div className=\"card-list\">  \n                {props.monsters.map(mon => (<CardMediaNew className='root' monster={mon} key={mon.id}><p key={mon.id}> {mon.name} </p></CardMediaNew>))}\n            </div> \n        </div>\n    )\n};","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport './search-box.styles.css'\nimport {StylesProvider} from '@material-ui/styles';\n\n\nexport const SearchBox = ({placeholder, handleChange}) => { //Cuando quiero poner las props directo de aca deben ir entre corchetes!! O bien usar (props) y después llamar a las props manualmente\n    console.log(\"searchbooox\")\n    return (\n      <form noValidate autoComplete=\"off\">\n        <div>\n            <StylesProvider inyectFirst>\n          <TextField placeholder={placeholder} onChange={handleChange} color=\"primary\" id=\"outlined-search\" label=\"Search field\" type=\"search\" variant=\"filled\" />\n          </StylesProvider>\n        </div>\n      </form>\n    );\n  }\n// vamos a conectar el repositorio actual a mi repo en github: git remote ad origin https://github.com/sebawarrior/monster-rolodex.git\n// luego yarn add gh-pages\n// luego escribimos en el package json: \"homepage\": \"https://sebawarrior.github.io/monster-rolodex\" (justo arriba de dependencies)\n// Luego escribimos \n// \"predeploy\": \"yarn build\", -> script del package json\n// \"deploy\": \"gh-pages -d build\" -> script del package json","import React, {Component} from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component.jsx'\nimport { SearchBox } from './components/search-box/search-box.component.jsx'\n\nclass App extends Component{\n  // Aquí va código javascript si es que necesito antes de renderear\n  myPromise;\n  constructor(){ //Aquí el super llama al constructor y permite acceder a this.state\n    super();\n    this.state = {\n      searchField: \"\", //Usamos comas para separar atributos\n      monsters: []\n    }\n\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters:users}));\n  }\n\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value})\n  }\n\n  //Tenemos dos posibilidades para que la función handleChange esté unida a this:\n  //1)\n  // this.handleChange = this.handleChange.bind(this)\n\n  //2)\n  // Usando arrow functions (como aparece en el ejemplo), pues la flecha toma el \"contexto\" en el que estoy y hace el bind de forma automática\n\n  // Luego, llamamos a la función como this.handleChick\n\n  // OJO: Si defino la función como :\n  // handleChange(e) {\n  //   this.setState({searchField: e.target.value})\n  // }\n  // Entonces puedo llamarla pero no usando this, sino que simplemente handleChange\n\n  render(){\n    const {searchField, monsters} = this.state // Con esto puedo tomar los state como constantes y almacenarlos\n    const filteredMonsters = monsters.filter(mon => mon.name.toLowerCase().includes(this.state.searchField.toLowerCase())) //El filtro podría haberlo hecho abajo también, solo se hizo para que fuese más entendible\n\n    return(\n      <div className=\"App\">\n      <h1 className=\"title-monster\"> Monster Rolodex </h1>\n      <SearchBox placeholder=\"Search monsters\" handleChange={(e) => this.setState({searchField: e.target.value})} />\n      <CardList monsters = {filteredMonsters}/>\n    </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}